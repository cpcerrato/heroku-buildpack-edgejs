#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# Override HOME environment
export HOME_APP=$HOME
export HOME=$BUILD_DIR

# Force APT_OPTIONS to override default values
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_OPTIONS="-o debug::nolocking=true -o dir::state=$APT_STATE_DIR"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::SourceList=$BUILD_DIR/temp/sources.list"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::Trusted=$BUILD_DIR/temp/trusted.gpg"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::Preferences=$BUILD_DIR/temp/preferences"
APT_OPTIONS="$APT_OPTIONS -o dir::cache=$APT_CACHE_DIR"

function error() {
  echo " !     $*" >&2
  exit 1
}


function topic() {
  echo "-----> $*"
}


function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}


function create_dirs(){
  mkdir -p "$BUILD_DIR/.apt"
  mkdir -p "$BUILD_DIR/temp"
  mkdir -p "$CACHE_DIR/dirs"
  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"
  mkdir -p "$BUILD_DIR/.profile.d"
}


# Install packages in temp directory. Those packages will not available after compile.
function install_apt_tmp(){
  APTFILE=$1

  for PACKAGE in $(cat ${APTFILE}); do
    if [[ $PACKAGE == *deb ]]; then
      PACKAGE_NAME=$(basename $PACKAGE .deb)
      PACKAGE_FILE=$APT_CACHE_DIR/archives/partial/00_$PACKAGE_NAME.deb
  
      topic "Fetching $PACKAGE"
      curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
    else
      topic "Fetching .debs for $PACKAGE"
      apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
    fi
  done
  
  
  for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
    topic "Installing $(basename $DEB)"
    dpkg -x $DEB $BUILD_DIR/temp/
  done

  rm -rf $APT_CACHE_DIR/archives/*.deb

}

# Those packages are available after deploy.
function install_apt(){
  APTFILE=$1

  for PACKAGE in $(cat ${APTFILE}); do
    if [[ $PACKAGE == *deb ]]; then
      PACKAGE_NAME=$(basename $PACKAGE .deb)
      PACKAGE_FILE=$APT_CACHE_DIR/archives/00_$PACKAGE_NAME.deb
  
      topic "Fetching $PACKAGE"
      curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
    else
      topic "Fetching .debs for $PACKAGE"
      apt-get $APT_OPTIONS -y --force-yes -d install $PACKAGE --reinstall | indent
    fi
  done
  
  for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
    topic "Installing $(basename $DEB)"
    dpkg -x $DEB $BUILD_DIR/.apt/
  done

  rm -rf $APT_CACHE_DIR/archives/*.deb
}


function create_apt_config_files(){
  # Set repositories
  cat <<EOF > $BUILD_DIR/temp/sources.list
deb http://archive.ubuntu.com/ubuntu trusty main
deb http://archive.ubuntu.com/ubuntu trusty-security main
deb http://archive.ubuntu.com/ubuntu trusty-updates main
deb http://archive.ubuntu.com/ubuntu trusty universe
deb http://download.mono-project.com/repo/debian wheezy main
deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main
deb http://httpredir.debian.org/debian jessie main
EOF

  # Set apt preferences to avoid install all packages from jessie
  cat <<EOF > $BUILD_DIR/temp/preferences
Package: *
Pin: release n=trusty*
Pin-Priority: 990

Package: *
Pin: origin "download.mono-project.com"
Pin-Priority: 999

Package: *
Pin: origin "apt.postgresql.org"
Pin-Priority: 999

Package: *
Pin: origin "httpredir.debian.org"
Pin-Priority: 800
EOF

  # Libraries
  cat <<EOF >$BUILD_DIR/temp/Aptfile
libgdiplus
libunwind8
gettext
EOF

  # Temporal dependencies
  cat <<EOF >$BUILD_DIR/temp/Apttemp
libicu-dev
uuid-dev
mono-complete
EOF
}


# Main

create_dirs
create_apt_config_files

# Test cache dirs and environment
if [[ $USE_CACHE -ne 1 ]] || [[ ! -d $CACHE_DIR/dirs/.apt ]] || [[ ! -d $CACHE_DIR/dirs/temp ]]; then
  topic "Add gpg keys..."
  cp -a /etc/apt/trusted.gpg $BUILD_DIR/temp/trusted.gpg
  apt-key --keyring $BUILD_DIR/temp/trusted.gpg adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF | indent
  apt-key --keyring $BUILD_DIR/temp/trusted.gpg adv --keyserver keyserver.ubuntu.com --recv-keys 126C0D24BD8A2942CC7DF8AC7638D0442B90D010 | indent
 
  topic "Updating apt caches"
  apt-get $APT_OPTIONS update 2>&1 | indent
  install_apt_tmp $BUILD_DIR/temp/Apttemp 2>&1 | indent
  install_apt $BUILD_DIR/temp/Aptfile 2>&1 | indent
  topic "Creating cache directories..."
  cp -ra $BUILD_DIR/.apt $CACHE_DIR/dirs/ 2>&1 | indent
  cp -ra $BUILD_DIR/temp $CACHE_DIR/dirs/ 2>&1 | indent
else
  topic "Restoring .apt and temp from cache..."
  cp -ra $CACHE_DIR/dirs/.apt $BUILD_DIR/ 2>&1 | indent
  echo "Restored .apt in $BUILD_DIR/.apt" | indent
  cp -ra $CACHE_DIR/dirs/temp $BUILD_DIR/
  echo "Restored temp in $BUILD_DIR/temp" | indent
fi


topic "Writing profile script..."
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
export MONO_PATH="\$HOME/.apt/usr/lib/mono/4.0:\${HOME}/.apt/usr/lib/mono/3.5:\${HOME}/.apt/usr/lib/mono/2.0"
export MONO_CONFIG="\${HOME}/.apt/etc/mono/config"
export MONO_CFG_DIR="\${HOME}/.apt/etc"
export MONO_REGISTRY_PATH="\${HOME}/.mono/registry"
export DNX_USER_HOME="\${HOME}/.dnx"
export DNX_GLOBAL_HOME="\${HOME}/.apt/usr/local/lib/dnx"
source \$HOME/.dnx/dnvm/dnvm.sh
dnvm use edge-coreclr -p -r coreclr
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$BUILD_DIR/temp/usr/lib/x86_64-linux-gnu:$BUILD_DIR/temp/usr/lib/i386-linux-gnu:$BUILD_DIR/temp/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib"
export LIBRARY_PATH="$LIBRARY_PATH:$BUILD_DIR/temp/usr/lib/x86_64-linux-gnu:$BUILD_DIR/temp/usr/lib/i386-linux-gnu:$BUILD_DIR/temp/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/temp/usr/include$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
  
# Change mono paths to avoid node-gyp install crash
sed -e "s|.*/usr/|$BUILD_DIR/temp/usr/|g" -i $BUILD_DIR/temp/usr/bin/dmcs 2>&1 | indent


export DNX_USER_HOME=$BUILD_DIR/.dnx
export DNX_GLOBAL_HOME=$BUILD_DIR/.apt/usr/local/lib/dnx
mkdir -p $DNX_GLOBAL_HOME

# Checking cache and install or restore.
if [[ $USE_CACHE -ne 1 ]] || [[ ! -d $CACHE_DIR/dirs/.dnx ]] || [[ ! -d $CACHE_DIR/dirs/dnx ]];then
  topic "Install dnvm."
  cd $BUILD_DIR/
  curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh > dnvminstall.sh 
  chmod +x dnvminstall.sh
  ./dnvminstall.sh 2>&1 | indent
  . "$DNX_USER_HOME/dnvm/dnvm.sh"
  dnvm install latest -r coreclr -alias edge-coreclr -g 2>&1 | indent
else
  topic "Restoring .dnx and dnx from CACHE_DIR"
  cp -ra $CACHE_DIR/dirs/.dnx $BUILD_DIR/ 2>&1 | indent
  echo "Restored .dnx in $BUILD_DIR/.dnx" | indent
  cp -ra $CACHE_DIR/dirs/dnx $BUILD_DIR/.apt/usr/local/lib/ 2>&1 | indent
  echo "Restored dnx in $BUILD_DIR/.apt/usr/local/lib/dnx." | indent
  . "$DNX_USER_HOME/dnvm/dnvm.sh"
fi

# Check if edge_js is in cache
if  [[ $USE_CACHE -ne 1 ]] || [[ ! -d $CACHE_DIR/dirs/edge ]]; then

  topic "Install edge dependences node-gyp and mocha"
  npm install node-gyp -g 2>&1 | indent
  npm install mocha -g 2>&1 | indent

  topic "Install edge.js"
  PWD_STORE=$PWD
  curl -sSL https://codeload.github.com/tjanczuk/edge/zip/master > $BUILD_DIR/node_modules/edge.js.zip 2>&1 | indent
  cd $BUILD_DIR/node_modules/
  unzip  -q $BUILD_DIR/node_modules/edge.js.zip 2>&1 | indent
  rm $BUILD_DIR/node_modules/edge.js.zip 
  mv edge-master edge
  cd edge/
  EDGE_DIRECTORY=$(pwd)
  echo $(dnvm use edge-coreclr -p -r coreclr) 2>&1 | indent
  (npm install) 2>&1 | indent

  (npm cache clean) 2>&1 | indent

  topic "Clean source code from node_modules..."
  rm -rf $BUILD_DIR/node_modules/edge/src 2>&1 | indent

  topic "Copy node.js to cache directory..."
  cp -ra $BUILD_DIR/node_modules/edge $CACHE_DIR/dirs/ 2>&1 | indent

  topic "Creating dnvm cache directory..."
  cp -ra $DNX_USER_HOME $CACHE_DIR/dirs/ 2>&1 | indent
  cp -ra $DNX_GLOBAL_HOME $CACHE_DIR/dirs/ 2>&1 | indent
  cd $PWD_STORE
else
  topic "Restoring edge.js from cache..."
  cp -ra $CACHE_DIR/dirs/edge $BUILD_DIR/node_modules/ 2>&1 | indent
  echo "restored in $BUILD_DIR/node_modules/edge" | indent
fi
  
# Delete temporal folder
rm -rf $BUILD_DIR/temp

# Set HOME environment to original value
export HOME=$HOME_APP

export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"

